animFrame =
{
	filename
	image
	anchor	//unscaled
	scale
	//triggers/events/physics object changes
}
animation =
{
	animFrames
	speed
	bounding box	//THIS IS related 2 the ONE IN THE SCENE MANAGER TREE??
}
tileDesc =
{
	animation(s)
	physics + other properties (sound effects, etc)
}
tiles = tileDesc[];



events into anim frames!!! (would imply reflected)
implies
=>renderable class?
=>Class: abstract method
=>Class stores chainup/down without chainup/down flag on function






-Frame:
.Src img name/img
.Src rect (optional?)
.destRect (size)
.Origin
.event (sound, phys, etc)
.render(pos)
{
Draw(img, (pos-origin)+destRect,srcRecs);
}
//FrameIns/tile?

-Anim
.frames[]//shared
.speed
.flags (pong, repeat, callback, etc)
.rect = Forall frames{max rect from origin}
.render(pos,frame)
{
Frames[frame].render(pos)
}

-AnimInstance
.anim
.frameIndex
.finished callback
.render()
{
anim.render(pos,frame)
}

-Sprite
.anims[]
.animInstance (current)
.position
.rect = forall anims {max rect from origin}
.render()
{
anInst.cur.render(pos)
}
//tile/sprite? Same render call for graph
//speed:insert per frame, or per sprite? (draw more clipped or more inserts)
